//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Admin.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServices")]
    public interface IServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/TilføjKamp", ReplyAction="http://tempuri.org/IServices/TilføjKampResponse")]
        ModelLibrary.Kupon.Kupon TilføjKamp(ModelLibrary.Kupon.Kupon kupon, ModelLibrary.Kupon.Kamp kamp, bool valgt1, bool valgtX, bool valgt2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/TilføjKamp", ReplyAction="http://tempuri.org/IServices/TilføjKampResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Kupon.Kupon> TilføjKampAsync(ModelLibrary.Kupon.Kupon kupon, ModelLibrary.Kupon.Kamp kamp, bool valgt1, bool valgtX, bool valgt2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/FjernKamp", ReplyAction="http://tempuri.org/IServices/FjernKampResponse")]
        ModelLibrary.Kupon.Kupon FjernKamp(ModelLibrary.Kupon.Kamp kamp, ModelLibrary.Kupon.Kupon kupon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/FjernKamp", ReplyAction="http://tempuri.org/IServices/FjernKampResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Kupon.Kupon> FjernKampAsync(ModelLibrary.Kupon.Kamp kamp, ModelLibrary.Kupon.Kupon kupon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/OddsUdregning", ReplyAction="http://tempuri.org/IServices/OddsUdregningResponse")]
        double OddsUdregning();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/OddsUdregning", ReplyAction="http://tempuri.org/IServices/OddsUdregningResponse")]
        System.Threading.Tasks.Task<double> OddsUdregningAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/MuligGevist", ReplyAction="http://tempuri.org/IServices/MuligGevistResponse")]
        double MuligGevist(ModelLibrary.Kupon.Kupon kupon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/MuligGevist", ReplyAction="http://tempuri.org/IServices/MuligGevistResponse")]
        System.Threading.Tasks.Task<double> MuligGevistAsync(ModelLibrary.Kupon.Kupon kupon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/BekræftKupon", ReplyAction="http://tempuri.org/IServices/BekræftKuponResponse")]
        bool BekræftKupon(ModelLibrary.Kupon.Kupon kupon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/BekræftKupon", ReplyAction="http://tempuri.org/IServices/BekræftKuponResponse")]
        System.Threading.Tasks.Task<bool> BekræftKuponAsync(ModelLibrary.Kupon.Kupon kupon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/FindKamp", ReplyAction="http://tempuri.org/IServices/FindKampResponse")]
        ModelLibrary.Kupon.Kamp FindKamp(int kampId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/FindKamp", ReplyAction="http://tempuri.org/IServices/FindKampResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Kupon.Kamp> FindKampAsync(int kampId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetAlleKampe", ReplyAction="http://tempuri.org/IServices/GetAlleKampeResponse")]
        ModelLibrary.Kupon.Kamp[] GetAlleKampe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetAlleKampe", ReplyAction="http://tempuri.org/IServices/GetAlleKampeResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Kupon.Kamp[]> GetAlleKampeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetAlleKuponer", ReplyAction="http://tempuri.org/IServices/GetAlleKuponerResponse")]
        ModelLibrary.Kupon.Kupon[] GetAlleKuponer(ModelLibrary.Bruger.Bruger bruger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetAlleKuponer", ReplyAction="http://tempuri.org/IServices/GetAlleKuponerResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Kupon.Kupon[]> GetAlleKuponerAsync(ModelLibrary.Bruger.Bruger bruger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/NyKupon", ReplyAction="http://tempuri.org/IServices/NyKuponResponse")]
        ModelLibrary.Kupon.Kupon NyKupon();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/NyKupon", ReplyAction="http://tempuri.org/IServices/NyKuponResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Kupon.Kupon> NyKuponAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetKampFromApi", ReplyAction="http://tempuri.org/IServices/GetKampFromApiResponse")]
        void GetKampFromApi();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetKampFromApi", ReplyAction="http://tempuri.org/IServices/GetKampFromApiResponse")]
        System.Threading.Tasks.Task GetKampFromApiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getIkkeSpilletKampe", ReplyAction="http://tempuri.org/IServices/getIkkeSpilletKampeResponse")]
        ModelLibrary.Kupon.Kamp[] getIkkeSpilletKampe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getIkkeSpilletKampe", ReplyAction="http://tempuri.org/IServices/getIkkeSpilletKampeResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Kupon.Kamp[]> getIkkeSpilletKampeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getBruger", ReplyAction="http://tempuri.org/IServices/getBrugerResponse")]
        ModelLibrary.Bruger.Bruger getBruger(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getBruger", ReplyAction="http://tempuri.org/IServices/getBrugerResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger> getBrugerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getBrugerEfterBrugernavn", ReplyAction="http://tempuri.org/IServices/getBrugerEfterBrugernavnResponse")]
        ModelLibrary.Bruger.Bruger getBrugerEfterBrugernavn(string bnavn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getBrugerEfterBrugernavn", ReplyAction="http://tempuri.org/IServices/getBrugerEfterBrugernavnResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger> getBrugerEfterBrugernavnAsync(string bnavn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getBrugere", ReplyAction="http://tempuri.org/IServices/getBrugereResponse")]
        ModelLibrary.Bruger.Bruger[] getBrugere();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getBrugere", ReplyAction="http://tempuri.org/IServices/getBrugereResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger[]> getBrugereAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/opretBruger", ReplyAction="http://tempuri.org/IServices/opretBrugerResponse")]
        void opretBruger(ModelLibrary.Bruger.Bruger bruger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/opretBruger", ReplyAction="http://tempuri.org/IServices/opretBrugerResponse")]
        System.Threading.Tasks.Task opretBrugerAsync(ModelLibrary.Bruger.Bruger bruger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/opdaterBruger", ReplyAction="http://tempuri.org/IServices/opdaterBrugerResponse")]
        void opdaterBruger(ModelLibrary.Bruger.Bruger bruger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/opdaterBruger", ReplyAction="http://tempuri.org/IServices/opdaterBrugerResponse")]
        System.Threading.Tasks.Task opdaterBrugerAsync(ModelLibrary.Bruger.Bruger bruger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/sletBruger", ReplyAction="http://tempuri.org/IServices/sletBrugerResponse")]
        void sletBruger(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/sletBruger", ReplyAction="http://tempuri.org/IServices/sletBrugerResponse")]
        System.Threading.Tasks.Task sletBrugerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/logInd", ReplyAction="http://tempuri.org/IServices/logIndResponse")]
        ModelLibrary.Bruger.Bruger logInd(string bNavn, string pWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/logInd", ReplyAction="http://tempuri.org/IServices/logIndResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger> logIndAsync(string bNavn, string pWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getHighscores", ReplyAction="http://tempuri.org/IServices/getHighscoresResponse")]
        ModelLibrary.Bruger.Bruger[] getHighscores();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getHighscores", ReplyAction="http://tempuri.org/IServices/getHighscoresResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger[]> getHighscoresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/OpretServer", ReplyAction="http://tempuri.org/IServices/OpretServerResponse")]
        void OpretServer(string serverName, int serverPort, int bufferSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/OpretServer", ReplyAction="http://tempuri.org/IServices/OpretServerResponse")]
        System.Threading.Tasks.Task OpretServerAsync(string serverName, int serverPort, int bufferSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/DeleteServer", ReplyAction="http://tempuri.org/IServices/DeleteServerResponse")]
        void DeleteServer(int serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/DeleteServer", ReplyAction="http://tempuri.org/IServices/DeleteServerResponse")]
        System.Threading.Tasks.Task DeleteServerAsync(int serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/UpdateServer", ReplyAction="http://tempuri.org/IServices/UpdateServerResponse")]
        void UpdateServer(int serverId, string serverName, int serverPort, int bufferSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/UpdateServer", ReplyAction="http://tempuri.org/IServices/UpdateServerResponse")]
        System.Threading.Tasks.Task UpdateServerAsync(int serverId, string serverName, int serverPort, int bufferSize);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicesChannel : Admin.ServiceReference1.IServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicesClient : System.ServiceModel.ClientBase<Admin.ServiceReference1.IServices>, Admin.ServiceReference1.IServices {
        
        public ServicesClient() {
        }
        
        public ServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ModelLibrary.Kupon.Kupon TilføjKamp(ModelLibrary.Kupon.Kupon kupon, ModelLibrary.Kupon.Kamp kamp, bool valgt1, bool valgtX, bool valgt2) {
            return base.Channel.TilføjKamp(kupon, kamp, valgt1, valgtX, valgt2);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Kupon.Kupon> TilføjKampAsync(ModelLibrary.Kupon.Kupon kupon, ModelLibrary.Kupon.Kamp kamp, bool valgt1, bool valgtX, bool valgt2) {
            return base.Channel.TilføjKampAsync(kupon, kamp, valgt1, valgtX, valgt2);
        }
        
        public ModelLibrary.Kupon.Kupon FjernKamp(ModelLibrary.Kupon.Kamp kamp, ModelLibrary.Kupon.Kupon kupon) {
            return base.Channel.FjernKamp(kamp, kupon);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Kupon.Kupon> FjernKampAsync(ModelLibrary.Kupon.Kamp kamp, ModelLibrary.Kupon.Kupon kupon) {
            return base.Channel.FjernKampAsync(kamp, kupon);
        }
        
        public double OddsUdregning() {
            return base.Channel.OddsUdregning();
        }
        
        public System.Threading.Tasks.Task<double> OddsUdregningAsync() {
            return base.Channel.OddsUdregningAsync();
        }
        
        public double MuligGevist(ModelLibrary.Kupon.Kupon kupon) {
            return base.Channel.MuligGevist(kupon);
        }
        
        public System.Threading.Tasks.Task<double> MuligGevistAsync(ModelLibrary.Kupon.Kupon kupon) {
            return base.Channel.MuligGevistAsync(kupon);
        }
        
        public bool BekræftKupon(ModelLibrary.Kupon.Kupon kupon) {
            return base.Channel.BekræftKupon(kupon);
        }
        
        public System.Threading.Tasks.Task<bool> BekræftKuponAsync(ModelLibrary.Kupon.Kupon kupon) {
            return base.Channel.BekræftKuponAsync(kupon);
        }
        
        public ModelLibrary.Kupon.Kamp FindKamp(int kampId) {
            return base.Channel.FindKamp(kampId);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Kupon.Kamp> FindKampAsync(int kampId) {
            return base.Channel.FindKampAsync(kampId);
        }
        
        public ModelLibrary.Kupon.Kamp[] GetAlleKampe() {
            return base.Channel.GetAlleKampe();
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Kupon.Kamp[]> GetAlleKampeAsync() {
            return base.Channel.GetAlleKampeAsync();
        }
        
        public ModelLibrary.Kupon.Kupon[] GetAlleKuponer(ModelLibrary.Bruger.Bruger bruger) {
            return base.Channel.GetAlleKuponer(bruger);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Kupon.Kupon[]> GetAlleKuponerAsync(ModelLibrary.Bruger.Bruger bruger) {
            return base.Channel.GetAlleKuponerAsync(bruger);
        }
        
        public ModelLibrary.Kupon.Kupon NyKupon() {
            return base.Channel.NyKupon();
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Kupon.Kupon> NyKuponAsync() {
            return base.Channel.NyKuponAsync();
        }
        
        public void GetKampFromApi() {
            base.Channel.GetKampFromApi();
        }
        
        public System.Threading.Tasks.Task GetKampFromApiAsync() {
            return base.Channel.GetKampFromApiAsync();
        }
        
        public ModelLibrary.Kupon.Kamp[] getIkkeSpilletKampe() {
            return base.Channel.getIkkeSpilletKampe();
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Kupon.Kamp[]> getIkkeSpilletKampeAsync() {
            return base.Channel.getIkkeSpilletKampeAsync();
        }
        
        public ModelLibrary.Bruger.Bruger getBruger(int id) {
            return base.Channel.getBruger(id);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger> getBrugerAsync(int id) {
            return base.Channel.getBrugerAsync(id);
        }
        
        public ModelLibrary.Bruger.Bruger getBrugerEfterBrugernavn(string bnavn) {
            return base.Channel.getBrugerEfterBrugernavn(bnavn);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger> getBrugerEfterBrugernavnAsync(string bnavn) {
            return base.Channel.getBrugerEfterBrugernavnAsync(bnavn);
        }
        
        public ModelLibrary.Bruger.Bruger[] getBrugere() {
            return base.Channel.getBrugere();
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger[]> getBrugereAsync() {
            return base.Channel.getBrugereAsync();
        }
        
        public void opretBruger(ModelLibrary.Bruger.Bruger bruger) {
            base.Channel.opretBruger(bruger);
        }
        
        public System.Threading.Tasks.Task opretBrugerAsync(ModelLibrary.Bruger.Bruger bruger) {
            return base.Channel.opretBrugerAsync(bruger);
        }
        
        public void opdaterBruger(ModelLibrary.Bruger.Bruger bruger) {
            base.Channel.opdaterBruger(bruger);
        }
        
        public System.Threading.Tasks.Task opdaterBrugerAsync(ModelLibrary.Bruger.Bruger bruger) {
            return base.Channel.opdaterBrugerAsync(bruger);
        }
        
        public void sletBruger(int id) {
            base.Channel.sletBruger(id);
        }
        
        public System.Threading.Tasks.Task sletBrugerAsync(int id) {
            return base.Channel.sletBrugerAsync(id);
        }
        
        public ModelLibrary.Bruger.Bruger logInd(string bNavn, string pWord) {
            return base.Channel.logInd(bNavn, pWord);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger> logIndAsync(string bNavn, string pWord) {
            return base.Channel.logIndAsync(bNavn, pWord);
        }
        
        public ModelLibrary.Bruger.Bruger[] getHighscores() {
            return base.Channel.getHighscores();
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Bruger.Bruger[]> getHighscoresAsync() {
            return base.Channel.getHighscoresAsync();
        }
        
        public void OpretServer(string serverName, int serverPort, int bufferSize) {
            base.Channel.OpretServer(serverName, serverPort, bufferSize);
        }
        
        public System.Threading.Tasks.Task OpretServerAsync(string serverName, int serverPort, int bufferSize) {
            return base.Channel.OpretServerAsync(serverName, serverPort, bufferSize);
        }
        
        public void DeleteServer(int serverId) {
            base.Channel.DeleteServer(serverId);
        }
        
        public System.Threading.Tasks.Task DeleteServerAsync(int serverId) {
            return base.Channel.DeleteServerAsync(serverId);
        }
        
        public void UpdateServer(int serverId, string serverName, int serverPort, int bufferSize) {
            base.Channel.UpdateServer(serverId, serverName, serverPort, bufferSize);
        }
        
        public System.Threading.Tasks.Task UpdateServerAsync(int serverId, string serverName, int serverPort, int bufferSize) {
            return base.Channel.UpdateServerAsync(serverId, serverName, serverPort, bufferSize);
        }
    }
}
